import Foundation
import MapKit

class MapViewModel: ObservableObject {
    @Published var objects: [MapObject] = []
    @Published var selectedObject: MapObject?

    private let saveKey = "savedMapObjects"

    init() {
        loadObjects()
    }

    // –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç –Ω–∞ –∫–∞—Ä—Ç—É
    func startCreatingObject(at coordinate: CLLocationCoordinate2D) {
        let newObject = MapObject(
            title: "",
            description: "",
            coordinate: MapObject.Coordinate(latitude: coordinate.latitude, longitude: coordinate.longitude),
            photoURLs: []
        )
        objects.append(newObject)
        selectedObject = newObject
        saveObjects()
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫
    func updateTitle(for object: MapObject, with newTitle: String) {
        guard let index = objects.firstIndex(where: { $0.id == object.id }) else { return }
        objects[index].title = newTitle
        saveObjects()
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ
    func updateDescription(for object: MapObject, with newDescription: String) {
        guard let index = objects.firstIndex(where: { $0.id == object.id }) else { return }
        objects[index].description = newDescription
        saveObjects()
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    func resetUserObjects() {
        print("üóë –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏ —Å–±—Ä–æ—Å UserDefaults")
        objects.removeAll()
        selectedObject = nil
        UserDefaults.standard.removeObject(forKey: saveKey)
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –ø–∞–º—è—Ç—å
    private func saveObjects() {
        if let encoded = try? JSONEncoder().encode(objects) {
            UserDefaults.standard.set(encoded, forKey: saveKey)
            print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ‚Äî \(objects.count) –æ–±—ä–µ–∫—Ç–æ–≤")
        } else {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤")
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ –ø–∞–º—è—Ç–∏
    private func loadObjects() {
        if let data = UserDefaults.standard.data(forKey: saveKey) {
            do {
                let decoded = try JSONDecoder().decode([MapObject].self, from: data)
                objects = decoded
            } catch {
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã:", error)
                objects = []
            }
        } else {
            print("‚ÑπÔ∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤")
            objects = []
        }
    }
}
